import {Encoder} from './Encoder';
import {Decoder} from './Decoder';
import {Server, Flags, Message} from "./Model";
import {Util} from "./Utils";

const dgram = require('dgram');

const server = dgram.createSocket('udp4');

server.on('error', (err) => {
  console.log(`server error:\n${err.stack}`);
  server.close();
});

let serverInfo: Server = new Server();
let messageReceived: string[] = [];
let nMessages: number = -1;
server.on('message', (msg, rinfo) => {
  console.log(`server message ${Decoder.getMessageNumber(msg)}, isLast: ${Decoder.isLastMessage(msg)}`);

  messageReceived[Decoder.getMessageNumber(msg)] = Util.toHexString(msg);

  if (Decoder.isLastMessage(msg))
    nMessages = Decoder.getMessageNumber(msg);

  console.log("Decoding...");
  Decoder.decode(msg, serverInfo);

  if (messageReceived.length == (nMessages + 1)) {
    console.log("Received all messages");
    let encoder: Encoder = new Encoder(serverInfo.timestamp, serverInfo);

    let messages: Message[] = encoder.encode(Flags.HEADERS + Flags.PLAYERS + Flags.TEAM);


    for (let k = 0; k < messageReceived.length; k++) {
      let ourMessage = Util.toHexString(messages[k].raw());
      console.log("Assert: " + messageReceived[k] == ourMessage);
    }
  }

});

server.on('listening', () => {
  var address = server.address();
  console.log(`server listening ${address.address}:${address.port}`);
});

var request: Buffer = Buffer.from('fefd0010203240ffffff01', 'hex');


let port: number = 29900;
let address: string = "178.63.57.115";

let resp1 = Buffer.fromhex");


let resp2 = Buffer.from( "001020324073706C69746E756D000101706C617965725F000620416C7661726F5F4D617274696E284553502900636C616E3F20547972616E64002052414D4D454E005B336441435D204C656D706F6B736E6973002042726F6B6B5F4F274C656500204A756461737A0020536C6565707900205B4F442D535D46696E72617200204370745F42616775657474655F467200204472616B656E005447505349204E756C6C62797465307830300020536F756C6C6573746572005B4744575D204D656E75656E005B4744575D2042756666616C6F52617374616D616E005447505349204372617764696F00206B656D616C6963696F755A00206469636B68656164303037003D4D65526B3D20426C75464665525F554B005B5249505D206B65762D6B696C6C65642D7961002050617472656E6B6F5448005B4744575D20486967685761793131005B2B482B5D206D725F6D616377696E64736F72505200205B4F442D535D333263617000204475746368496E416374696F6E005B504C45425D20416E6465686831350020566F6C6F642E3431005B4353465D41206D656469635F787832005B4353465D2070616C6B6F2D637A003D4D65526B3D206675626172002043696D65746F003D4D65526B3D20417368697368696E003D4D65526B3D207375676E6174005B4353465D2044722E446F6B746F72696C61003D4D65526B3D205F536D7572665F317374005B4749532B5D204152432A746F756C79393000205B50525D434154417C536F62616E005B4E4F445D2052616465676173740020417269614A6F6F6E69005B4744575D207A62616A63686F75003D4D65526B3D2044722E48615800202D7C48656D756C656E737369737C2D0020436869636B656E536F7570005B362D315D205461617669746969766931005B362D315D204B656261625F456C61696E0020646F736A616100204D69647574616A002053697257696C6C69616D00236D6C67204A61636B5F486F7769747A6572003D4D65526B3D204D722E52616E74626F78005B4744575D2063687279736C65722D504C005B362D315D204B2D4D617373697665002069676F723930005B362D315D204361707461696E5F566C616400205B4F442D535D536B756C6C00206F726174696F00494E465F504C204B6F73696900205B494E465F504C5D43686F7261476C6F7761005B362D315D206578656C3832000073636F72655F0000363237003631370036313400343537003434360034313500343038003339390033393900333938003339350033353800333435003333390033333900333337003333330033323600333233003331350033303900333037003330360032393300323933003239300032383800323738003237370032373400323731003236310032353700323536003234370032343100323335003233320032323700323235003232320032313300323039003230350031393900313934003139310031373700313731003136380031363800313537003135350031353400313530003134300031333800313336003133330031323800313234003130370031303700313033000070696E675F00003237003238003337003233360033360031390034330033310033340033370035370034390036340036350035300036390035390033380034380034340035320033330032340033330033310032333300393700343900343800313900333400333500333200333300333900343600333700323500333900333900343000333500333200313631003431003333003433003134390035330033370031303900343500353300343600343200373000353600363300353600333800323000343900333300343500007465616D5F000032003200320032003100310032003100320031003200310032003100320031003200320031003100320031003200310031003100" , "hex")

let resp3 = Buffer.from( "001020324073706C69746E756D0082017465616D5F0019310031003200310031003100310031003100310031003100310031003100310031003100310031003100320031003200320032003100320032003100310032003200320031003200320032003200006465617468735F00003000310031003100300030003100300032003000310030003100300032003000310030003100320031003000310031003000310031003000300030003100300030003000310031003100300030003000300030003000300031003000320030003100320031003000310031003000320031003000300030003000320032003000007069645F00003130303030303133330031303030303539353300313030313736343730003130303231393830310031303031343936393300313030303037373733003130303330353032350031303030313133313200313030333330393837003130303030313637340031303033343530393100313030313332363734003130303030383631300031303030303134363900313030333337373530003130303334343233370031303030393936383500313030323334313739003130303030323132320031303032343233363700313030333030303530003130303132323936320031303032383532383200313030303030303836003130303030323938330031303030333739363000313030303031383434003130303130343433370031303030303133383100313030323935383730003130303130303531350031303030323430333500313030303032393031003130303032303635300031303030303538323600313030313236363231003130303030313530330031303030303132323300313030303338393130003130303030313239390031303030303234353000313030303434303837003130303030323937340031303032393335303500313030303031393335003130303030323431380031303033333532323700313030323838383338003130303033313232310031303030383834333900313030313934353233003130303133373832350031303031303338393700313030303137383239003130303030303136370031303030373234353500313030303131373635003130303034393433340031303031373837383700313030303037313336003130303030303232380031303033343335383500313030333431393335003130303030393838360000736B696C6C5F00003000300030003000300030003000300030003500300030003000330030003000300031003100320030003000300033003000310030003000300030003100310033003400300030003100300031003100300030003100300030003000350030003000320030003100310037003000300030003000300030003000300030003000004149426F745F000030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030003000300030000000027465616D5F7400005255004742000073636F72655F740000300030000000" , "hex")


let responses:Buffer[] = [];
responses.push(resp1);
responses.push(resp2);
responses.push(resp3);

for(let k in responses){
  let msg = responses[k];
  console.log(`server message ${Decoder.getMessageNumber(msg)}, isLast: ${Decoder.isLastMessage(msg)}`);

  messageReceived[Decoder.getMessageNumber(msg)] = Util.toHexString(msg);

  if (Decoder.isLastMessage(msg))
    nMessages = Decoder.getMessageNumber(msg);

  console.log("Decoding...");
  Decoder.decode(msg, serverInfo);

  if (messageReceived.length == (nMessages + 1)) {
    console.log("Received all messages");
    let encoder: Encoder = new Encoder(serverInfo.timestamp, serverInfo);

    let messages: Message[] = encoder.encode(Flags.HEADERS + Flags.PLAYERS + Flags.TEAM);

console.log("== Encoded ==");
    for (let k = 0; k < messageReceived.length; k++) {
      //let ourMessage = Util.toHexString(messages[k].raw());
      console.log("\n\n");
      console.log(messages[k].toString());
    }
  }
}